import 'package:apphoctienganh/game_learn/speakquestionprovider.dart';
import 'package:apphoctienganh/home/SpeechProvider';
import 'package:apphoctienganh/model/flashcard.dart';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:provider/provider.dart';

class SpeechQuizScreen extends StatefulWidget {
  final List<Flashcard> flashcards;

  const SpeechQuizScreen({super.key, required this.flashcards});

  @override
  State<SpeechQuizScreen> createState() => _SpeechQuizScreenState();
}

class _SpeechQuizScreenState extends State<SpeechQuizScreen> {
  @override
  void initState() {
    super.initState();
    requestMicPermission();
    final provider = Provider.of<SpeechQuestionProvider>(
      context,
      listen: false,
    );
    provider.loadData(widget.flashcards); // Load flashcards m·ªõi t·ª´ widget
  }

  Future<void> requestMicPermission() async {
    var status = await Permission.microphone.status;
    if (!status.isGranted) {
      await Permission.microphone.request();
    }
  }

  @override
  Widget build(BuildContext context) {
    final provider = Provider.of<SpeechQuestionProvider>(context);

    return Scaffold(
      appBar: AppBar(title: const Text('H·ªçc ph√°t √¢m ')),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Text(
                'C√¢u h·ªèi:',
                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                  fontWeight: FontWeight.bold,
                  fontSize: 24,
                  color: Colors.deepPurple,
                ),
              ),
              const SizedBox(height: 10),
              Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                elevation: 5,
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Text(
                    provider.currentQuestion.question,
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.w600,
                      color: Colors.black87,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ),
              const SizedBox(height: 30),

              if (provider.isListening)
                Text(
                  'C√¢u m√¨nh ƒë√£ ƒë·ªçc: ${provider.spokenText}',
                  style: const TextStyle(fontSize: 18, color: Colors.black45),
                  textAlign: TextAlign.center,
                ),
              const SizedBox(height: 20),

              // S·ª≠ d·ª•ng Row ƒë·ªÉ ƒë·∫∑t icon loa v√† mic c·∫°nh nhau v√† ƒë·ªìng b·ªô ki·ªÉu
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ElevatedButton.icon(
                    onPressed: () {
                      context.read<SpeechProvider>().speakText(
                        context
                            .read<SpeechQuestionProvider>()
                            .currentQuestion
                            .question,
                        true,
                      );
                    },
                    icon: Icon(
                      Icons
                          .volume_up, // Ho·∫∑c thay ƒë·ªïi th√†nh Icons.volume_up n·∫øu mu·ªën loa
                      size: 35, // ƒê·∫∑t k√≠ch th∆∞·ªõc cho icon
                    ),
                    label: Text(
                      '', // Ho·∫∑c thay ƒë·ªïi th√†nh 'D·ª´ng' khi mu·ªën bi·ªÉu th·ªã tr·∫°ng th√°i
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Color.fromARGB(255, 186, 218, 191),
                      padding: EdgeInsets.symmetric(
                        vertical: 12,
                        horizontal: 30,
                      ),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(30),
                      ),
                    ),
                  ),
                  SizedBox(
                    width: 10, // Kho·∫£ng c√°ch gi·ªØa hai n√∫t
                  ),
                  ElevatedButton.icon(
                    onPressed: () {
                      if (provider.isListening) {
                        provider.stopListening();
                        final correct = provider.checkAnswer();
                        showDialog(
                          context: context,
                          builder:
                              (_) => AlertDialog(
                                title: Text(
                                  correct ? ' ƒê√∫ng r·ªìi!' : ' Sai r·ªìi!',
                                ),
                                content: Text(
                                  correct
                                      ? 'B·∫°n ƒë√£ ph√°t √¢m ch√≠nh x√°c.'
                                      : 'B·∫°n c·∫ßn luy·ªán th√™m. C√¢u ƒë√∫ng l√†:\n"${provider.currentQuestion.question}"',
                                ),
                                actions: [
                                  TextButton(
                                    onPressed: () {
                                      Navigator.pop(context);
                                      provider.nextQuestion();
                                    },
                                    child: Text(
                                      provider.isLastQuestion
                                          ? 'Ho√†n t·∫•t'
                                          : 'C√¢u ti·∫øp',
                                      style: TextStyle(
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                        );
                      } else {
                        provider.startListening();
                      }
                    },
                    icon: Icon(
                      provider.isListening ? Icons.stop : Icons.mic,
                      size: 30, // ƒê·∫∑t k√≠ch th∆∞·ªõc gi·ªëng icon loa
                    ),
                    label: Text(
                      provider.isListening ? 'D·ª´ng' : 'Thu √¢m',
                      style: const TextStyle(fontSize: 18),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color.fromARGB(255, 186, 218, 191),
                      padding: const EdgeInsets.symmetric(
                        vertical: 12,
                        horizontal: 30,
                      ),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(30),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),

              if (provider.isLastQuestion)
                Center(
                  child: Text(
                    'üéâ B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c c√¢u h·ªèi!',
                    style: const TextStyle(fontSize: 20, color: Colors.orange),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}
